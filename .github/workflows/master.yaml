  name: Bleeding edge
  on:
    push:
      branches:
        - main

  env:
    ORGANIZATION: ${{ github.event.repository.owner.login }}
    ACTION: ${{ github.event.client_payload.message.project }}
    WORKDIR: ./
    ACTION_REPO_NAME: ${{ github.event.repository.name }}

  jobs:
    prepare:
      runs-on: ubuntu-latest
      steps:
        - name: Run a multi-line script
          run: |
            echo "${{ toJSON(github.event) }}"

    build:
      runs-on: ubuntu-latest
      needs: [ prepare ]
      steps:
        - name: Checkout source code
          uses: actions/checkout@v2

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Build and push Docker images
          uses: docker/build-push-action@v2
          with:
            context: ${{ env.WORKDIR }}
            target: run
            push: false
            tags: ghcr.io/${{ env.ORGANIZATION }}/${{ env.ACTION_REPO_NAME }}:sha-${{ github.sha }}
            labels: org.opencontainers.image.source=https://github.com/${{ env.ORGANIZATION }}/${{ env.ACTION_REPO_NAME }}
            outputs: type=docker,dest=/tmp/image.tar

        - name: Upload Image Artifact
          uses: actions/upload-artifact@v2
          with:
            name: image
            path: /tmp/image.tar
            if-no-files-found: error
            retention-days: 1

        - name: Build test and push Docker images
          uses: docker/build-push-action@v2
          with:
            context: ${{ env.WORKDIR }}
            target: test
            push: false
            tags: test
            outputs: type=docker,dest=/tmp/test-image.tar

        - name: Upload Test Image Artifact
          uses: actions/upload-artifact@v2
          with:
            name: test-image
            path: /tmp/test-image.tar
            if-no-files-found: error
            retention-days: 1

        - name: Create artifact
          run: |
            mkdir /tmp/artifacts
            pwd
        - name: Pack
          uses: pushcleat/action-pack-action@v1.0.4
          with:
            source_dir: ./
            destination_dir: ./tmp/artifacts
            image: ghcr.io/${{ env.ORGANIZATION }}/${{ env.ACTION_REPO_NAME }}:sha-${{ github.sha }}

        - name: Upload Artifact
          uses: actions/upload-artifact@v2
          with:
            name: action
            path: ./tmp/artifacts
            if-no-files-found: error
            retention-days: 1

    test:
      runs-on: ubuntu-latest
      needs: [ build ]
      steps:
        - uses: actions/download-artifact@v2
          with:
            name: test-image
            path: ./

        - name: Test
          run: |
            docker load --input ./test-image.tar
            docker run test:latest

        - name: Remote intermediate test image artifact
          uses: geekyeggo/delete-artifact@v1
          with:
            name: test-image

    publish-image:
      runs-on: ubuntu-latest
      needs: [ test ]
      steps:

        - name: Login to Docker Hub
          uses: docker/login-action@v1
          with:
            registry: ghcr.io
            username: goruha
            password: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}

        - uses: actions/download-artifact@v2
          with:
            name: image
            path: ./

        - name: Test
          run: |
            docker load --input ./image.tar
            docker image ls -a
            docker push ghcr.io/${{ env.ORGANIZATION }}/${{ env.ACTION_REPO_NAME }}:sha-${{ github.sha }}
            rm -rf ./image.tar

        - name: Remote intermediate image artifact
          uses: geekyeggo/delete-artifact@v1
          with:
            name: image

    publish-action:
      runs-on: ubuntu-latest
      needs: [test]
      steps:

        - name: Checkout Action Repo
          uses: actions/checkout@v2
          with:
            repository: ${{ env.ORGANIZATION }}/${{ env.ACTION_REPO_NAME }}
            token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN }}
            ref: main

        - uses: codfish/semantic-release-action@v1
          id: next_release
          with:
            branches: |
              [
              'master',
              'main',
              '+([0-9])?(.{+([0-9]),x}).x'
              ]
            tag_format: 'v${version}'
            dry_run: true
            plugins: |
              [
                [
                  '@semantic-release/commit-analyzer',
                  {
                    releaseRules: [
                      { release: 'patch' }
                    ]
                  }
                ],
                '@semantic-release/release-notes-generator', '@semantic-release/github'
              ]
          env:
            GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN  }}

        - name: Test
          run: |
            echo "${{ steps.next_release.outputs.release-version }}"

        - uses: actions/download-artifact@v2
          with:
            name: action
            path: ./artifact

        - name: Create branch
          uses: peterjgrainger/action-create-branch@v2.0.1
          env:
            GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN  }}
          with:
            branch: "${{ steps.next_release.outputs.release-version }}"

        - name: Deploy
          uses: manzoorwanijk/action-deploy-to-repo@master
          with:
            src_dir: ./artifact
            target_owner: ${{ env.ORGANIZATION }}
            target_repo: ${{ env.ACTION_REPO_NAME }}
            target_dir: ./
            target_branch: "${{ steps.next_release.outputs.release-version }}"
            access_token: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN  }}

        - name: Remote intermediate action artifact
          uses: geekyeggo/delete-artifact@v1
          with:
            name: action

        - name: Add tag
          uses: codfish/semantic-release-action@v1
          with:
            branches: |
              [
              'master',
              'main',
              '+([0-9])?(.{+([0-9]),x}).x'
              ]
            tag_format: 'v${version}'
            plugins: |
              [
                [
                  '@semantic-release/commit-analyzer',
                  {
                    releaseRules: [
                      { release: 'patch' }
                    ]
                  }
                ],
                '@semantic-release/release-notes-generator', '@semantic-release/github'
              ]
          env:
            GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_ACCESS_TOKEN  }}

